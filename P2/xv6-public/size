fs.c:112:// not stored on disk: ip->ref and ip->valid.
fs.c:123://   is free if ip->ref is zero. Otherwise ip->ref tracks
fs.c:130://   cache entry is only correct when ip->valid is 1.
fs.c:132://   the disk and sets ip->valid, while iput() clears
fs.c:133://   ip->valid if ip->ref has fallen to zero.
fs.c:142://   ... examine and modify ip->xxx ...
fs.c:150:// pathname lookup. iget() increments ip->ref so that the inode
fs.c:158:// entries. Since ip->ref indicates whether an entry is free,
fs.c:159:// and ip->dev and ip->inum indicate which i-node an entry
fs.c:162:// An ip->lock sleep-lock protects all ip-> fields other than ref,
fs.c:163:// dev, and inum.  One must hold ip->lock in order to
fs.c:164:// read or write that inode's ip->valid, ip->size, ip->type, &c.
fs.c:204:    if(dip->type == 0){  // a free inode
fs.c:206:      dip->type = type;
fs.c:217:// Must be called after every change to an ip->xxx field
fs.c:219:// Caller must hold ip->lock.
fs.c:226:  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
fs.c:227:  dip = (struct dinode*)bp->data + ip->inum%IPB;
fs.c:228:  dip->type = ip->type;
fs.c:229:  dip->major = ip->major;
fs.c:230:  dip->minor = ip->minor;
fs.c:231:  dip->nlink = ip->nlink;
fs.c:232:  dip->size = ip->size;
fs.c:233:  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
fs.c:251:    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
fs.c:252:      ip->ref++;
fs.c:256:    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
fs.c:265:  ip->dev = dev;
fs.c:266:  ip->inum = inum;
fs.c:267:  ip->ref = 1;
fs.c:268:  ip->valid = 0;
fs.c:280:  ip->ref++;
fs.c:293:  if(ip == 0 || ip->ref < 1)
fs.c:296:  acquiresleep(&ip->lock);
fs.c:298:  if(ip->valid == 0){
fs.c:299:    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
fs.c:300:    dip = (struct dinode*)bp->data + ip->inum%IPB;
fs.c:301:    ip->type = dip->type;
fs.c:302:    ip->major = dip->major;
fs.c:303:    ip->minor = dip->minor;
fs.c:304:    ip->nlink = dip->nlink;
fs.c:305:    ip->size = dip->size;
fs.c:306:    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
fs.c:308:    ip->valid = 1;
fs.c:309:    if(ip->type == 0)
fs.c:318:  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
fs.c:321:  releasesleep(&ip->lock);
fs.c:334:  acquiresleep(&ip->lock);
fs.c:335:  if(ip->valid && ip->nlink == 0){
fs.c:337:    int r = ip->ref;
fs.c:342:      ip->type = 0;
fs.c:344:      ip->valid = 0;
fs.c:347:  releasesleep(&ip->lock);
fs.c:350:  ip->ref--;
fs.c:367:// are listed in ip->addrs[].  The next NINDIRECT blocks are
fs.c:368:// listed in block ip->addrs[NDIRECT].
fs.c:379:    if((addr = ip->addrs[bn]) == 0)
fs.c:380:      ip->addrs[bn] = addr = balloc(ip->dev);
fs.c:387:    if((addr = ip->addrs[NDIRECT]) == 0)
fs.c:388:      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
fs.c:389:    bp = bread(ip->dev, addr);
fs.c:392:      a[bn] = addr = balloc(ip->dev);
fs.c:415:    if(ip->addrs[i]){
fs.c:416:      bfree(ip->dev, ip->addrs[i]);
fs.c:417:      ip->addrs[i] = 0;
fs.c:421:  if(ip->addrs[NDIRECT]){
fs.c:422:    bp = bread(ip->dev, ip->addrs[NDIRECT]);
fs.c:426:        bfree(ip->dev, a[j]);
fs.c:429:    bfree(ip->dev, ip->addrs[NDIRECT]);
fs.c:430:    ip->addrs[NDIRECT] = 0;
fs.c:433:  ip->size = 0;
fs.c:438:// Caller must hold ip->lock.
fs.c:442:  st->dev = ip->dev;
fs.c:443:  st->ino = ip->inum;
fs.c:444:  st->type = ip->type;
fs.c:445:  st->nlink = ip->nlink;
fs.c:446:  st->size = ip->size;
fs.c:451:// Caller must hold ip->lock.
fs.c:458:  if(ip->type == T_DEV){
fs.c:459:    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
fs.c:461:    return devsw[ip->major].read(ip, dst, n);
fs.c:464:  if(off > ip->size || off + n < off)
fs.c:466:  if(off + n > ip->size)
fs.c:467:    n = ip->size - off;
fs.c:470:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
fs.c:480:// Caller must hold ip->lock.
fs.c:487:  if(ip->type == T_DEV){
fs.c:488:    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
fs.c:490:    return devsw[ip->major].write(ip, src, n);
fs.c:493:  if(off > ip->size || off + n < off)
fs.c:499:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
fs.c:506:  if(n > 0 && off > ip->size){
fs.c:507:    ip->size = off;
fs.c:636:    if(ip->type != T_DIR){
sysfile.c:134:  if(ip->type == T_DIR){
sysfile.c:140:  ip->nlink++;
sysfile.c:147:  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
sysfile.c:160:  ip->nlink--;
sysfile.c:211:  if(ip->nlink < 1)
sysfile.c:213:  if(ip->type == T_DIR && !isdirempty(ip)){
sysfile.c:221:  if(ip->type == T_DIR){
sysfile.c:227:  ip->nlink--;
sysfile.c:254:    if(type == T_FILE && ip->type == T_FILE)
sysfile.c:264:  ip->major = major;
sysfile.c:265:  ip->minor = minor;
sysfile.c:266:  ip->nlink = 1;
sysfile.c:272:    // No ip->nlink++ for ".": avoid cyclic ref count.
sysfile.c:273:    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
sysfile.c:277:  if(dirlink(dp, name, ip->inum) < 0)
sysfile.c:310:    if(ip->type == T_DIR && omode != O_RDONLY){
sysfile.c:384:  if(ip->type != T_DIR){
